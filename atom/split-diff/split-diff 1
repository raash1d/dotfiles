
Ieee1609Dot2EndEntityRaInterface
{iso(1) identified-organization(3) ieee(111)
standards-association-numbered-series-standards(2) wave-stds(1609)
dot2(2) scms(2) interfaces(1) ee-ra(8)}

DEFINITIONS AUTOMATIC TAGS ::= BEGIN

EXPORTS ALL;

IMPORTS
  EccP256CurvePoint,
  EncryptionKey,
  HashAlgorithm,
  Hostname,
  Signature,
  HashedId8,
  PublicEncryptionKey,
  PublicVerificationKey,
  Time32,
  Time64,
  Uint8,
  Uint16,
  Uint32
FROM IEEE1609dot2BaseTypes {iso(1) identified-organization(3) ieee(111)
    standards-association-numbered-series-standards(2) wave-stds(1609) dot2(2)
    base(1) base-types(2)}

  Certificate,
  ExplicitCertificate,
  Ieee1609Dot2Data,
  ImplicitCertificate,
  SignerIdentifier
FROM IEEE1609dot2 {iso(1) identified-organization(3) ieee(111)
    standards-association-numbered-series-standards(2) wave-stds(1609) dot2(2)
    base(1) schema(1)}

  SecurityMgmtPsid
FROM Ieee1609dot2ScmsBaseTypes {iso(1) identified-organization(3) ieee(111)
    standards-association-numbered-series-standards(2) wave-stds(1609)  dot2(2)
    scms (2) interfaces(1) base-types (2)}

  CompositeCrl
FROM Ieee1609Dot2ScmsComponentCertificateManagement {iso(1)
    identified-organization(3) ieee(111) standards-association-numbered-series-standards(2)
    wave-stds(1609) dot2(2) scms(2) interfaces(1) component-certificate-management (3)}

;

--- The EndEntityRaInterfacePDU is the parent message type for messages sent between end entities
-- and the Registration Authority.
-- @param eeRaCertRequest                      contains a message from an EE to the RA to request a
--                                             copy of the RA’s currently valid certificate.
-- @param raEeCertResponse                     is a message from the RA to the EE to acknowledge the
--                                             receipt of eeRaCertRequest
-- @param eeRaPseudonymCertProvisioningRequest is a message from an EE to the RA to request pseudonym
--                                             certificates
-- @param raEePseudonymCertProvisioningAck     is a message from the RA to the EE to acknowledge the
--                                             receipt of eeRaPseudonymCertProvisioningRequest
-- @param eeRaIdCertProvisioningRequest        is a message from an EE to the RA to request an
--                                             identification certificate
-- @param raEeIdCertProvisioningAck            is a message from the RA to the EE to acknowledge the
--                                             receipt of eeRaIdCertProvisioningRequest
-- @param eeRaAppCertProvisioningRequest       is a message from an EE to the RA to request an
--                                             application certificate
-- @param raEeAppCertProvisioningAck           is a message from the RA to the EE to acknowledge the
--                                             receipt of eeRaAppCertProvisioningRequest
-- @param eeRaAuthenticatedDownloadRequest     is a message from an EE to the RA to request the
--                                             download of certificates (once they are ready).
EndEntityRaInterfacePDU::= CHOICE {
    eeRaCertRequest                      EeRaCertRequestMsg,
    raEeCertResponse                     RaEeCertResponseMsg,
    eeRaPseudonymCertProvisioningRequest EeRaPseudonymCertProvisioningRequest,
    raEePseudonymCertProvisioningAck     RaEePseudonymCertProvisioningAck,
    eeRaIdCertProvisioningRequest        EeRaIdCertProvisioningRequest,
    raEeIdCertProvisioningAck            RaEeIdCertProvisioningAck,
    eeRaAppCertProvisioningRequest       EeRaAppCertProvisioningRequest,
    raEeAppCertProvisioningAck           RaEeAppCertProvisioningAck,
    eeRaAuthenticatedDownloadRequest     AuthenticatedDownloadRequest,
    ...
}


-- @param version contains the current version of the data type. The version specified in this
--                document is version 1, represented by the integer 1
EeRaCertRequestMsg ::= SEQUENCE {
    version         Uint8(1),
    ...
}


-- @param version contains the current version of the data type. The version specified in this
--                document is version 1, represented by the integer 1
-- @param reply   indicates the contents of the reply message. In this version of this document, only
--                one choice option is supported, namely an acknowledgement (ack) of type
--                RaEeCertResponseAck
RaEeCertResponseMsg ::= SEQUENCE {
    version         Uint8(1),
  	reply           CHOICE {
        ack           RaEeCertResponseAck,
        ...
    },
    ...
}

-- @param raCertificate contains the RA’s currently valid public key certificate as defined in
--                      Section 6.4.2 of IEEE 1609.2-2016
-- @param crl           contains the Certificate Revocation List pertinent to the RA certificate. The
--                      Certificate Revocation List type is defined in Section 7.3 and 7.4.1 of
--                      IEEE 1609.2-2016
RaEeCertResponseAck ::= SEQUENCE {
    raCertificate   Certificate,
    crl             CompositeCrl,
    ...
}

-- @param current-time         indicates the time of request generation
-- @param requested-start-time indicates the requested start time for the requested certificates to
--                            take effect (in terms of validity).
CommonProvisioningRequestFields ::= SEQUENCE {
    current-time                 Time32,
    requested-start-time         Time32,
    ...
}

-- @param seed-key  contains the butterfly seed key
-- @param expansion contains the expansion parameter needed to perform a Butterfly key expansion
--                  Butterfly expansion is described in https://wiki.campllc.org/display/SCP/SCP1%3A+Butterfly+Keys
UnsignedButterflyParams ::= SEQUENCE {
    seed-key              EccP256CurvePoint,
    expansion             OCTET STRING (SIZE (16))
}



--- These are signed and encrypted before sending, see scms-protocol.asn. Note that Identification
-- certificates use Butterfly keys.
-- @param version           contains the current version of the data type. The version specified in
--                          this document is version 1.-- @param verify-key-info   provides the information for the SCMS to generate and embed multiple ID
--                          certificate signature public keys, one for each ID certificate.
-- @param cert-enc-key-info if included, provides the information for the SCMS to generate and
--                          embed multiple ID certificate optional encryption public keys, one for
--                          each ID certificate.
-- @param resp-enc-key-info provides the information for SCMS to uniquely encrypt each ID
--                          certificate prior to responding to the EE.
-- @param common            provides the structure for indicating the time of the request and the
--                          requested start time of the certificates.
EeRaIdCertProvisioningRequest ::= SEQUENCE {
    version                      Uint8(1),
    verify-key-info              UnsignedButterflyParams,
    cert-enc-key-info            UnsignedButterflyParams OPTIONAL,
    resp-enc-key-info            UnsignedButterflyParams,
    common                       CommonProvisioningRequestFields,
    ...
}

--- Application certificate provisioning requests are similar to Identification cert except there is no
-- use of butterfly keys.
-- @param version                  contains the current version of the data type. The version
--                                 specified in this document is version 1.-- @param verify-key               provides the public key to be embedded in the application
--                                 certificate.-- @param cert-encryption-key-info provides the discrete PublicEncryptionKey to be embedded in the
--                                 application certificate for application encryption functions.-- @param resp-encryption-key      provides the discrete PublicEncryptionKey to be used by the SCMS--                                 to encrypt the certificate response back to the EE.-- @param common                   provides the structure for indicating the time of the request
--                                 and the requested start time of the certificates.
EeRaAppCertProvisioningRequest ::= SEQUENCE {
    version                 Uint8(1),
    verify-key              PublicVerificationKey,
    cert-encryption-key     PublicEncryptionKey OPTIONAL,
    response-encryption-key PublicEncryptionKey,
    common                  CommonProvisioningRequestFields,
    ...
}

--- Pseudonym certificate provisioning: Pseudonym certificates use butterfly keys. Unlike
-- identification certificates, they are shuffled and include linkage values. This differentiation is
-- visible in other interfaces only, in particular RA-PCA.
-- @param version           contains the current version of the data type. The version specified in--                          this document is version 1.-- @param verify-key-info   provides the information for the SCMS to generate and embed multiple
--                          pseudonym certificate signature public keys, one for each ID certificate.
-- @param resp-enc-key-info provides the information for the SCMS to uniquely encrypt each
--                          pseudonym certificate prior to responding to the EE.
-- @param common            provides the structure for indicating the time of the request and the
--                          requested start time of the certificates.
EeRaPseudonymCertProvisioningRequest ::= SEQUENCE {
    version                      Uint8(1),
    verify-key-info              UnsignedButterflyParams,
    resp-enc-key-info            UnsignedButterflyParams,
    common                       CommonProvisioningRequestFields,
    ...
}


--- Enrollment certificate of the end entity, for pseudonym certificate requests
EndEntityEnrollmentPseudonymCertificate ::= ImplicitCertificate (WITH COMPONENTS {...,
      toBeSigned(WITH COMPONENTS {...,
          certRequestPermissions PRESENT
      })
  })

--- This structure represents the acknowledgement of the RA that it has received an EE’s pseudonym
-- certificate provisioning request. This message is signed and encrypted before sending to EE, see
-- scms-protocol.asn.
-- @param version     contains the current version of the data type. The version specified this
--                    document is version 1.
-- @param requestHash contains the hash of the original request, using the HashedId8 type as defined
--                    in 1609dot2-base-types.asn of [2]. In the case when the RA cannot calculate the
--                    hash of the original request due to a hardError, this field shall be all zeroes.
-- @param reply       contains the acknowledgement (ack) in the form of a--                    PseudonymCertProvisioningAck structure.RaEePseudonymCertProvisioningAck ::= SEQUENCE {
    version     Uint8(1),
    -- in case when RA can't calculate hash of the original
    -- request due to hardError, zero value should be returned
    requestHash HashedId8,  -- hash of the original request
    reply       CHOICE {
        ack        PseudonymCertProvisioningAck,
        ...
    },
    ...
}

RaEeIdCertProvisioningAck ::= RaEePseudonymCertProvisioningAck

RaEeAppCertProvisioningAck ::= RaEePseudonymCertProvisioningAck

--- This structure represents the acknowledgement of the RA that it has received an EE’s pseudonym
-- certificate provisioning request.
-- @param certDLTime contains the time at which the download of the generated certificates
--                   is available
-- @param certDLURL  contains the URL at which the EE may download the pseudonym certificates at
--                   the indicated time
PseudonymCertProvisioningAck ::= SEQUENCE {
    certDLTime       Time32,
    certDLURL        Hostname,
    ...
}

--- This structure represents the EE’s request for download from the RA. The request indicates the time
-- of the download request in addition to the requested filename.
--
-- @param timestamp contains the time at which the download request for the file (filename)
--                  was generated.
-- @param filename  contains the name of the file to download.
AuthenticatedDownloadRequest ::= SEQUENCE {
    timestamp      Time32,
    filename       UTF8String (SIZE(0..255)),
    ...
}

END
